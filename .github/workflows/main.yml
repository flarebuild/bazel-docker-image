name: bazel

# Required secrets:
# GCP_SERVICE_ACCOUNT_EMAIL
# GCP_SERVICE_ACCOUNT_KEY

# Create IAM Role, create Service Account, bind role and obtain the key:
# gcloud iam service-accounts create "github-actions-image-pusher" --display-name="GH Actions Image Pusher" --description="Account to push images via GitHub Actions" --project="flare-build"
# gcloud iam roles create ImagePusher --project=flare-build --title=ImagePusher --description="Writes to Storage buckets" --permissions=storage.buckets.get,storage.multipartUploads.abort,storage.multipartUploads.create,storage.multipartUploads.list,storage.multipartUploads.listParts,storage.objects.create,storage.objects.delete,storage.objects.list
# gcloud projects add-iam-policy-binding "flare-build" --member="serviceAccount:github-actions-image-pusher@flare-build.iam.gserviceaccount.com" --role="projects/flare-build/roles/ImagePusher" --condition=None
# gcloud iam service-accounts keys create "/tmp/github-actions-image-pusher.json" --iam-account "github-actions-image-pusher@flare-build.iam.gserviceaccount.com"
# base64 /tmp/github-actions-image-pusher.json && rm /tmp/github-actions-image-pusher.json

env:
  REGISTRY_GCP: gcr.io
  REGISTRY_GH: ghcr.io
  GCP_PROJECT_ID: flare-build
  IMAGE_NAME: bazel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  push-image:
    name: Push Image
    # Skip workflow entirely for [skip ci] commits
    if: |
      false == contains(github.event.commits[0].message, '[skip ci]') &&
      false == contains(github.event.commits[0].message, '[no ci]')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Import Service Account key
        run: echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" | base64 -d > /tmp/auth.json

      - name: GCloud Auth
        run: |
          gcloud --quiet auth \
          activate-service-account "${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}" \
          --key-file=/tmp/auth.json \
          --project="${GCP_PROJECT_ID}"

      - name: Docker Registry Auth (GCP)
        run: gcloud auth configure-docker

      - name: Docker Registry Auth (GH)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${REGISTRY_GH} -u $ --password-stdin

      - name: Docker Build (Debian)
        run: docker build . --file Dockerfile --tag $IMAGE_NAME:debian --label "runnumber=${GITHUB_RUN_ID}"

      - name: Docker Build (Ubuntu)
        run: docker build . --file ubuntu.Dockerfile --tag $IMAGE_NAME:ubuntu --label "runnumber=${GITHUB_RUN_ID}"

      - name: Push Images
        run: |
          IMAGE_ID_GH=${REGISTRY_GH}/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID_GCP=${REGISTRY_GCP}/${GCP_PROJECT_ID}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID_GCP
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME:debian $IMAGE_ID_GCP:$VERSION
          docker tag $IMAGE_NAME:debian $IMAGE_ID_GH:$VERSION
          docker tag $IMAGE_NAME:ubuntu $IMAGE_ID_GCP:$VERSION-ubuntu
          docker tag $IMAGE_NAME:ubuntu $IMAGE_ID_GH:$VERSION-ubuntu
          docker push --all-tags $IMAGE_ID_GH
          docker push --all-tags $IMAGE_ID_GCP
